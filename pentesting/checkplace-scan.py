#!/usr/bin/env python
# A basic ZAP Python API example which spiders and scans a target URL

import time
import requests
import sys
from pprint import pprint
from zapv2 import ZAPv2

proxy = 'http://127.0.0.1:8088'
apikey = 'qjcj0u6bvipbl1ul3ukb6ekvh1'  # Change to match the API key set in ZAP, or use None if the API key is disabled

create_new_session = True
use_selenium_script = True
define_new_context = False
print_context = False
use_normal_spider = True
use_ajax_spider = True
run_passive_scan = True
run_active_scan = True
generate_report = True

prefix_context = "checkplace"
MINUTES_AJAX = 1

prefix_script_name = 'checkplace-selenium'
authScriptEngine = 'Oracle Nashorn'
path_script_file_name = '/home/sebas/tas/source/eclipse-workspace/checkplace-be/pentesting/'
authScriptDescription = 'This is the script used to authenticate in checkplace'

# Use the line below if ZAP is not listening on port 8080, for example, if listening on port 8090
zap = ZAPv2(apikey=apikey, proxies={'http': proxy, 'https': proxy})
headers = {
    'Accept': 'application/json',
    'X-ZAP-API-Key': apikey
}


def main(site):
    script_name = prefix_script_name + ".js"
    script_file_name = path_script_file_name + script_name

    if create_new_session:
        session_name = "session-checkplace"
        print("Creating new session")
        create_session(session_name)
        print("End creating new session")

    # Executing selenium script
    if use_selenium_script:
        print("Executing selenium script")
        execute_script(script_name, script_file_name)
        print("End execution selenium script")

    # Proxy a request to the target so that ZAP has something to deal with necessary??
    print('Accessing target {}'.format(site))
    zap.urlopen(site)
    # Give the sites tree a chance to get updated
    time.sleep(2)

    if use_normal_spider:
        print('Spider target {}'.format(site))
        normal_spider(site)
        print('Spider completed')

    if use_ajax_spider:
        print('Ajax Spider target {}'.format(site))
        print('Ajax Spider will take (seconds) {}'.format(MINUTES_AJAX * 60))
        ajax_spider(site)
        print('Ajax Spider completed')

    if run_passive_scan:
        print('Passive Scanning target {}'.format(site))
        passive_scan()
        print('Passive Scan completed')

    if run_active_scan:
        print('Active Scanning target {}'.format(site))
        active_scan(site)
        print('Active Scan completed')

    if generate_report:
        generate_info(site)

    print("Analysis finished")


def create_session(session_name):
    requests.get(proxy + '/JSON/core/action/newSession/', params={
        'name': session_name, 'overwrite': True
    }, headers=headers)


def normal_spider(target):
    requests.get(proxy + '/JSON/spider/action/scan/', params={
        'url': target, 'recurse': True
    }, headers=headers)
    status = 0
    while status < 100:
        r = requests.get(proxy + '/JSON/spider/view/status/', params={
        }, headers=headers)
        if 'status' in r.json():
            status = int(r.json()['status'])
            if status % 20 == 0:
                print('Spider progress %: {}'.format(status))
    time.sleep(20)


def ajax_spider(target):
    ajax = zap.ajaxSpider
    ajax.scan(target)
    timeout = time.time() + 60 * MINUTES_AJAX  # X minutes from now
    # Loop until the ajax spider has finished or the timeout has exceeded
    while ajax.status == 'running':
        if time.time() > timeout:
            break
    print('Ajax Spider status ' + ajax.status)
    time.sleep(20)


def passive_scan():
    while int(zap.pscan.records_to_scan) > 0:
        if int(zap.pscan.records_to_scan) % 10 == 0:
            print('Records to passive scan : {}'.format(zap.pscan.records_to_scan))
    time.sleep(20)


def active_scan(site):
    requests.get(proxy + '/JSON/ascan/action/scan/', params={
        'url': site, 'recurse': True
    }, headers=headers)
    status = 0
    while status < 100:
        r = requests.get(proxy + '/JSON/ascan/view/status/', params={
        }, headers=headers)
        if 'status' in r.json():
            status = int(r.json()['status'])
            if status % 10 == 0:
                print('Progress active scan %: {}'.format(status))
        else:
            print('Active scan not running properly')
            break
    time.sleep(20)


def print_context_info(context_name):
    pprint('Use context with information:')
    r = requests.get(proxy + '/JSON/context/view/urls/', params={
        'contextName': context_name
    }, headers=headers)
    print(r.json())

    r = requests.get(proxy + '/JSON/context/view/context/', params={
        'contextName': context_name
    }, headers=headers)
    print(r.json())


def execute_script(script_name, script_file_name):
    requests.get(proxy + '/JSON/script/action/remove/', params={
        'scriptName': script_name
    }, headers=headers)

    requests.get(proxy + '/JSON/script/action/load/', params={
        'scriptName': script_name, 'scriptType': 'standalone', 'scriptEngine': authScriptEngine,
        'fileName': script_file_name
    }, headers=headers)

    r = requests.get(proxy + '/JSON/script/action/runStandAloneScript/', params={
        'scriptName': script_name
    }, headers=headers)
    print(r.json())
    time.sleep(20)


def generate_info(target):
    r = requests.get(proxy + '/JSON/alert/view/alertsSummary/', params={
        'baseurl': target
    }, headers=headers)
    print(r.json())
    print('Generating HTML report')
    r = requests.get(proxy + '/OTHER/core/other/htmlreport/', params={
    }, headers=headers)
    print('Generating JSON report')
    r = requests.get(proxy + '/OTHER/core/other/jsonreport/', params={
    }, headers=headers)
    print('***************************************************************************')
    print(r.json())
    print('***************************************************************************')
    report_filename_json = 'checkplace-zap.json'
    print('Generating json report:' + report_filename_json)
    r = requests.get(proxy + '/OTHER/core/other/jsonreport/', params={
    }, headers=headers)
    with open(report_filename_json, 'wb') as f:
        f.write(r.content)

if __name__ == '__main__':
    main(sys.argv[1])
